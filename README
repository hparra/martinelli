Martinelli
==========
Hector G. Parra <hector@hectorparra.com>

Martinelli is an HTTP Server that exposes serial port (RS-232/422) devices as a RESTful web service.

NOTE: This README is formatted in AsciiDoc (http://powerman.name/doc/asciidoc)


== Table of Contents

* Requirements
* Installation
* Execution
* Configuration
* Applications
* Resources


== Requirements

Martinelli is a ruby program based on the Mongrel HTTP server by Zed Shaw. Ruby, ruby gems, and a few gems are required for installation.

=== Installing Ruby & Gems

If you don't already have ruby installed on your computer, please follow one of these tutorials:

* Mac OS X: http://telios.tumblr.com/post/236594626/
* Microsoft Windows: http://telios.tumblr.com/post/236587136/
* Ubuntu Linux: http://telios.tumblr.com/post/236604939/

WARNING: Martinelli does not run on Windows' Ruby 1.9 due to bugs in the serialport dependency. Please use Ruby 1.8

WARNING: There are known problems with 64-bit Ruby 1.9 and serialport.

WARNING: Mongrel has problems on Windows Vista. A DNS lookup causes unusually slow HTTP response times (~1s). If you are not running in buffered mode and have a device that continuously outputs data then your HTTP requests will be slower than the serialport buffer, resulting in a useless system.

If you already have ruby and ruby gems installed, be sure to update to the latest ruby gems version:

	sudo gem update --system

=== Installing Dependencies

Once you have ruby and ruby gems installed and updated please continue with the following instructions:

NOTE: Eliminate the 'sudo' command if you wish to install the gem in your local directory or you are on a Windows system

Install Mongrel:

	sudo gem install mongrel

Install JSON:
	
	sudo gem install json

Install serialport:

	sudo gem install serialport -s http://gemcutter.org


== Installation

There are currently two methods to install Martinelli: from a compressed archive (from which you are probably reading this file), or Github (if you have access)

=== Installing from archive

Uncompress the Martinelli archive into an appropriate directory.

=== Installing from GitHub

Assuming you already have Git installed:

	git clone git@github.com:hparra/martinelli.git


== Execution

On POSIX systems, from the martinelli/ directory:

	bin/martinelli

On Windows systems, from the martinelli/ directory:

	ruby bin/martinelli

WARNING: On Windows systems, a threading bug will force you to close Martinelli by killing the ruby.exe process in System Monitor

Once the system is running, you can experiment with Martinelli using the testing application:

	http://localhost:5000/apps/testing/


== Configuration

Even though you can initialize serial devices through Martinelli's interface it also offers a system to preload devices at runtime. If you edit such files, you should restart the server to load the changes.

The martinelli/config/ directory houses configuration files in JSON format, one for each device. Examples are located in the 'examples' folder within this directory. Let's examine one now:

	{
		"name": "Healthometer_349KLX",
		"format": "HEX",
		"delimiter": "\r",
		"port": "\/dev\/tty.usbserial",
		"baud_rate": 2400,
		"data_bits": 8,
		"stop_bits": 1,
		"make": "Healthometer",
		"model": "349KLX",
		"description": "Remote Display Scale",
		"details": {
			"capacity": "400 lbs",
			"increment": "0.2 lb",
			"platform": "13.5 in x 11.6 in",
			"power_supply": "9V battery"
		}
	}

* name: the device identifier that completes the URI e.g. http://localhost:5000/devices/Healthometer_349KLX
* format: metaencoding of data sent and received from device e.g. "HEX", "ASCII", "BINARY"
* delimeter: the value that represents the end of the command
* baud_rate: the baud rate of the device
* data_bits: the number of data bits
* stop_bits: the number of stop bits
* parity: the code for parity selection: 0 = NONE, 1 = ODD, 2 = EVEN
* make: the brand of the device (optional)
* model: the model number or name of the device (optional)
* descriptions: a sentence or paragraph describing the device (optional)
* details: a JSON object describing user-defined details about the device (optional)


== Applications

Since Martinelli represents serial devices through a RESTful HTTP resources, you can use just about any programming language and framework to build useful applications, including simple HTML and JavaScript. Using a JavaScript library like jQuery (http://jquery.com/) will make certain aspects of development, such as AJAX requests, easier.

Martinelli includes a directory, martinelli/public/, which can host your own web applications. Files in this directory are served through:

	http://localhost:5000/apps/

=== Examples

http://marco.calit2.uci.edu/conglomo/WeightScaleNew/ Is a web application that interacts with the Healthometer 349KLX Weight Scale

=== Development Guidelines

A user should be able to specify the location of the martinelli server at runtime through the UI or a configuration file. For example, a web application may include a parameter in the query string of the URL e.g. http://my_server/my_application.html?martinelli_uri=http://192.168.1.100:5000


== Resources

The following are links to Martinelli related resources, including authors, dependencies, and standards.

* Telios: http://telios.calit2.uci.edu
* serialport: http://github.com/hparra/ruby-serialport
* Mongrel: http://mongrel.rubyforge.org/
* Ruby JSON: http://flori.github.com/json/